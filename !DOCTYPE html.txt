<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>INSAR Linc</title>
  <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no">
  <link href="https://api.mapbox.com/mapbox-gl-js/v3.9.3/mapbox-gl.css" rel="stylesheet">
  <script src="https://api.mapbox.com/mapbox-gl-js/v3.9.3/mapbox-gl.js"></script>
  <style>
    body { margin: 0; padding: 0; }
    #map { position: absolute; top: 0; bottom: 0; width: 100%; }
    /* CSS class for fading out the popup */
    .fade-out {
      opacity: 0;
      transition: opacity 0.5s ease;
    }
  </style>
</head>
<body>
  <style>
    #btn-spin {
      font: bold 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;
      background-color: #3386c0;
      color: #fff;
      position: absolute;
      top: 20px;
      left: 50%;
      z-index: 1;
      border: none;
      width: 200px;
      margin-left: -100px;
      display: block;
      cursor: pointer;
      padding: 10px 20px;
      border-radius: 3px;
    }
    #btn-spin:hover {
      background-color: #4ea0da;
    }
  </style>
  
  <div id="map"></div>
  <button id="btn-spin">Pause rotation</button>
  
  <script>
    mapboxgl.accessToken = 'pk.eyJ1Ijoic2Nocm9kZXItaGlsbCIsImEiOiJjbHpmdW5ibXUxY3I1MmtvbXU3c2t0aHhoIn0.D_W59ZKzQSJf7WF8Cfhm3w';
    const map = new mapboxgl.Map({
      container: 'map',
      style: 'mapbox://styles/mapbox/satellite-v9',
      projection: 'globe',
      zoom: 10,
      center: [173.942053519644503, -41.399980118741027]
    });
    
    map.on('style.load', () => {
      map.setFog({});
    });
    
    // Rotation configuration
    const secondsPerRevolution = 120;
    const maxSpinZoom = 2;
    const slowSpinZoom = 3;
    
    let userInteracting = false;
    let spinEnabled = true;
    
    function spinGlobe() {
      const zoom = map.getZoom();
      if (spinEnabled && !userInteracting && zoom < maxSpinZoom) {
        let distancePerSecond = 360 / secondsPerRevolution;
        if (zoom > slowSpinZoom) {
          const zoomDif = (maxSpinZoom - zoom) / (maxSpinZoom - slowSpinZoom);
          distancePerSecond *= zoomDif;
        }
        const center = map.getCenter();
        center.lng -= distancePerSecond;
        map.easeTo({ center, duration: 1000, easing: (n) => n });
      }
    }
    
    // Pause spinning on interaction
    map.on('mousedown', () => { userInteracting = true; });
    map.on('mouseup', () => { userInteracting = false; spinGlobe(); });
    map.on('dragend', () => { userInteracting = false; spinGlobe(); });
    map.on('pitchend', () => { userInteracting = false; spinGlobe(); });
    map.on('rotateend', () => { userInteracting = false; spinGlobe(); });
    map.on('moveend', () => { spinGlobe(); });
    
    document.getElementById('btn-spin').addEventListener('click', (e) => {
      spinEnabled = !spinEnabled;
      if (spinEnabled) {
        spinGlobe();
        e.target.innerHTML = 'Pause rotation';
      } else {
        map.stop();
        e.target.innerHTML = 'Start rotation';
      }
    });
    
    spinGlobe();
    
    map.on('load', () => {
      // Add your GeoJSON points as a source
      map.addSource('custom-points', {
        'type': 'geojson',
        'data': {
          "type": "FeatureCollection",
          "name": "points_geojson",
          "crs": { "type": "name", "properties": { "name": "urn:ogc:def:crs:OGC:1.3:CRS84" } },
          "features": [
            { "type": "Feature", "properties": { "id": 1, "priority": "high" }, "geometry": { "type": "Point", "coordinates": [173.942053519644503, -41.399980118741027] } },
            { "type": "Feature", "properties": { "id": 2, "priority": "low" }, "geometry": { "type": "Point", "coordinates": [173.933111922710339, -41.396353473959259] } },
            { "type": "Feature", "properties": { "id": 3, "priority": "medium" }, "geometry": { "type": "Point", "coordinates": [173.940505894622817, -41.406735558831571] } },
            { "type": "Feature", "properties": { "id": 4, "priority": "high" }, "geometry": { "type": "Point", "coordinates": [173.948870090229093, -41.400506509577561] } },
            { "type": "Feature", "properties": { "id": 5, "priority": "high" }, "geometry": { "type": "Point", "coordinates": [173.935387682749081, -41.395522907452978] } }
          ]
        }
      });
      
      // Add a layer to display the points
      map.addLayer({
        'id': 'points-layer',
        'type': 'circle',
        'source': 'custom-points',
        'paint': {
          'circle-radius': 6,
          'circle-color': [
            'match',
            ['get', 'priority'],
            'high', '#FF0000',
            'medium', '#FFA500',
            'low', '#008000',
            '#000000'
          ]
        }
      });
      
      // Updated interactivity with popups using DOM content
      map.on('click', 'points-layer', (e) => {
        const coordinates = e.features[0].geometry.coordinates.slice();
        const id = e.features[0].properties.id;
        const priority = e.features[0].properties.priority;
        
        // Create a container for the popup content
        const popupContent = document.createElement('div');
        popupContent.innerHTML = `
          <h3>Point ID: ${id}</h3>
          <p>Priority: ${priority}</p>
          <form>
            <input type="radio" id="watch-${id}" name="action-${id}" value="watch">
            <label for="watch-${id}">Watch</label>
            <br>
            <input type="radio" id="ignore-${id}" name="action-${id}" value="ignore">
            <label for="ignore-${id}">Ignore</label>
            <br>
            <button type="button" id="submitBtn-${id}">Submit</button>
          </form>
        `;
        
        // Create the popup instance and set its content
        const popup = new mapboxgl.Popup()
          .setLngLat(coordinates)
          .setDOMContent(popupContent)
          .addTo(map);
        
        // Add click event listener for the submit button
        const submitButton = popupContent.querySelector(`#submitBtn-${id}`);
        submitButton.addEventListener('click', () => {
          // Get the selected radio button
          const selectedRadio = popupContent.querySelector(`input[name="action-${id}"]:checked`);
          if (!selectedRadio) {
            alert("Please select an action (Watch or Ignore) before submitting.");
            return;
          }
          const action = selectedRadio.value;
          
          // Here you can add your CMS update logic if needed.
          // For now, we simply fade out the popup and show a success message.
          popupContent.classList.add('fade-out');
          setTimeout(() => {
            popup.remove();
          }, 500);
          
          alert("AOI added to RFM database");
        });
      });
      
      map.on('mouseenter', 'points-layer', () => {
        map.getCanvas().style.cursor = 'pointer';
      });
      
      map.on('mouseleave', 'points-layer', () => {
        map.getCanvas().style.cursor = '';
      });
    });
  </script>
</body>
</html>
